// +build !ignore_autogenerated

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1alpha1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/openshift/must-gather-operator/pkg/apis/mustgather/v1alpha1.MustGather":       schema_pkg_apis_mustgather_v1alpha1_MustGather(ref),
		"github.com/openshift/must-gather-operator/pkg/apis/mustgather/v1alpha1.MustGatherSpec":   schema_pkg_apis_mustgather_v1alpha1_MustGatherSpec(ref),
		"github.com/openshift/must-gather-operator/pkg/apis/mustgather/v1alpha1.MustGatherStatus": schema_pkg_apis_mustgather_v1alpha1_MustGatherStatus(ref),
		"github.com/openshift/must-gather-operator/pkg/apis/mustgather/v1alpha1.ProxySpec":        schema_pkg_apis_mustgather_v1alpha1_ProxySpec(ref),
	}
}

func schema_pkg_apis_mustgather_v1alpha1_MustGather(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MustGather is the Schema for the mustgathers API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/openshift/must-gather-operator/pkg/apis/mustgather/v1alpha1.MustGatherSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/openshift/must-gather-operator/pkg/apis/mustgather/v1alpha1.MustGatherStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/openshift/must-gather-operator/pkg/apis/mustgather/v1alpha1.MustGatherSpec", "github.com/openshift/must-gather-operator/pkg/apis/mustgather/v1alpha1.MustGatherStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_mustgather_v1alpha1_MustGatherSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MustGatherSpec defines the desired state of MustGather",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"caseID": {
						SchemaProps: spec.SchemaProps{
							Description: "The is of the case this must gather will be uploaded to",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"caseManagementAccountSecretRef": {
						SchemaProps: spec.SchemaProps{
							Description: "the secret container a username and password field to be used to authenticate with red hat case management systems",
							Ref:         ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"serviceAccountRef": {
						SchemaProps: spec.SchemaProps{
							Description: "the service account to use to run the must gather job pod, defaults to default",
							Ref:         ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"mustGatherImages": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "set",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "The list of must gather images to run, optional, it will default to: $DEFAULT_MUST_GATHER_IMAGE",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"proxyConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "This represents the proxy configuration to be used. If left empty it will default to the cluster-level proxy configuration.",
							Ref:         ref("github.com/openshift/must-gather-operator/pkg/apis/mustgather/v1alpha1.ProxySpec"),
						},
					},
				},
				Required: []string{"caseID", "caseManagementAccountSecretRef"},
			},
		},
		Dependencies: []string{
			"github.com/openshift/must-gather-operator/pkg/apis/mustgather/v1alpha1.ProxySpec", "k8s.io/api/core/v1.LocalObjectReference"},
	}
}

func schema_pkg_apis_mustgather_v1alpha1_MustGatherStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MustGatherStatus defines the observed state of MustGather",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"status": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"lastUpdate": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"completed": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
				},
				Required: []string{"completed"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_mustgather_v1alpha1_ProxySpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"httpProxy": {
						SchemaProps: spec.SchemaProps{
							Description: "httpProxy is the URL of the proxy for HTTP requests.  Empty means unset and will not result in an env var.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"httpsProxy": {
						SchemaProps: spec.SchemaProps{
							Description: "httpsProxy is the URL of the proxy for HTTPS requests.  Empty means unset and will not result in an env var.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"noProxy": {
						SchemaProps: spec.SchemaProps{
							Description: "noProxy is the list of domains for which the proxy should not be used.  Empty means unset and will not result in an env var.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}
